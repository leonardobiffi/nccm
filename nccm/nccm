#!/usr/bin/python3

'''
NCurses ssh Connection Manager (nccm)
=====================================

![](images/program_screenshot.png)

Copyright (C) 2020 Kenneth Aaron.

flyingrhino AT orcon DOT net DOT nz

Freedom makes a better world: released under GNU GPLv3.

https://www.gnu.org/licenses/gpl-3.0.en.html

This software can be used by anyone at no cost, however,
if you like using my software and can support - please
donate money to a children's hospital of your choice.

This program is free software: you can redistribute it
and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation:
GNU GPLv3. You must include this entire text with your
distribution.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See the GNU General Public License for more details.


Manual install instructions
---------------------------

This is the easiest way to install nccm, you can of course
install and use nccm in any way you wish.

* Clone the project from the git repository:
  `git clone https://github.com/flyingrhinonz/nccm nccm.git`
* `cd nccm.git/nccm/`
* `sudo install -m 755 nccm -t /usr/local/bin/`


The ssh connections/config file `nccm.yml` should be
copied to any one of the following locations, and is
loaded from the first location found:
- `~/.config/nccm/nccm.yml`
- `~/.nccm.yml`
- `~/nccm.yml`
- `/etc/nccm.yml`


nccm requires Python3 to be installed on your machine,
which should already be present on most Linux boxes.
Most Python library dependencies are already present
as part of Python3 however the following may not be
present in which case you need to install them manually.


On Debian or similar use apt:
`sudo apt install python3-pip yamllint`

On Fedora or similar use dnf:
`sudo dnf install python3-pip yamllint`

Then install PyYAML:
`pip3 install --user PyYAML`


Before starting, edit the `nccm.yml` file and add your
own ssh connections. Formatting YAML is easy and the file
you downloaded from the project page is well documented
and has examples of every supported scenario.
Follow the structure in the file - provide the connection
name at the beginning of a line and sub config items
indented by two spaces. Don't forget the colons - these
are part of the YAML language.

Don't worry about ordering your SSH session blocks in any
specific way because nccm gives you "sort by" options
within the program.

Once you've finished editing, check your work with yamllint:
`yamllint nccm.yml`

If no errors are returned, then you've formatted your file
correctly, and it's safe to continue.

If nccm is accessible from your path and is executable,
typing nccm is all that's required to launch the TUI
(terminal user interface).
If you see Python 3 exceptions, check whether you have
satisfied the dependencies. Any exceptions should mention
any package that's missing.


nccm.yml settings
-----------------

This file is mostly used for ssh connection details, but
also supports program settings as follows:

`nccm_config_controlmode`:
Controls the cursor movement mode. Two modes are supported:
- std:    Cursor keys move the marker as expected.
- focus:  Marker and list move independently.
          The list is designed to move while the marker
          remains fixed unless it is moved manually.

`nccm_config_loglevel`:
Controls log level of messages sent by nccm to syslog.
Use this for debugging. Default level is warning.
Supported levels: debug, info, warning, error, critical


Controls
--------

In nccm_config_controlmode == std mode:

- Up/Down arrows:     Move the marker the traditional way
- Home/End:           Jump marker to list first/last entry
- PgUp/PgDn:          Page up/down in the list

In nccm_config_controlmode == focus mode:

- Up/Down arrows:     Scroll the list up/down
- Home/End:           Jump to list first/last entry
- PgUp/PgDn:          Page up/down in the list
- Shift Up/Down:      Move the marker up/down
- Shift Left/Right:   Move the marker to display top/bottom

In both modes:

- Left/Right arrows:  Scroll the list horizontally
- Tab:                Switch between text boxes
- Enter or Ctrl-m:    Connect to the selected entry
- Ctrl-h:             Display this help menu
- Ctrl-k              Toggle cursor mode std <--> focus
- Ctrl-q or Ctrl-c:   Quit the program
- F1-F5 or !@#$% :    Sort by respective column (1-5)


Usage
-----

`Conn` textbox:
Accepts integer values only (and !@#$% for sorting).
Pressing Enter here will connect to this connection ID,
as corresponding to a valid value in the full
unfiltered list (even if that particular connection
is hidden by unmatching text in the `Filter` textbox),
ignoring everything else (`Filter` textbox, highlighted
line) - even if they don't match.
If this textbox is empty, it will connect to the
connection marked by the highlighted line.

`Filter` textbox:
Type any filter text here.
Accepts any printable character and space.
Text is forced to lowercase, and the resulting filtering
is case insensitive.
Pressing Enter will connect to the connection highlighed
in red. This also works if you're in the `Conn` textbox
and it's empty.

Textboxes accept backspace to delete one char backwards,
inline editing not supported.

Displayed connection list is filtered by the combined
contents of all the fields as you type in real time.
Spaces delimit filters if typed into `Filter` textbox
and all filter entries are AND'ed.

nccm_config_controlmode == focus was inspired by vim
where you can move your display up/down around your work
while keeping your current line selected.


Sorting
-------

F1-F5 keys sort by the respective fields 1-5.
The display shows 4 visible columms but we treat
username and server address as separate columns for
sorting purposes.
The Fn keys may be captured by certain GUIs so we have
an alternative - when focused on `Conn` window, press
Shift-1 through 5 (!@#$%) to toggle sorting by the
respective field number. If you type these special
characters in the `Filter` textbox they become standard
filters just like any printable character.
Pressing the same key again reverses the sort order.

```
Column #  Column name       Sort    Alternate sort
--------  -----------       ----    --------------
1         List serial #     F1      !
2         Friendly name     F2      @
3         User name         F3      #
4         Server address    F4      $
5         Description       F5      %
```


Limitations
-----------

Will not store passwords. Please don't request this
feature because it won't be added.
Either use ssh passwordless login (by placing your
public key on the server in `.ssh/authorized_keys` - tip:
look up `ssh-copy-id`) or store your password in a
password manager and paste it when prompted.

Does not like window resizing and exits gracefully
displaying an error message.
It's safe to resize the window once connection
establishment is in progress or after connected to
your server.

Does not support highlighting filter keywords in search
results because this results in a messy and confusing
display once more than a couple keywords are used.

Text entry is limited to the length of the textboxes
which in turn are dictated by the width of your window.
This should be enough for most use cases though.


Troubleshooting
---------------

Starting nccm:
The most common problem is missing Python3 dependencies.
Run nccm and read the exception message - it will tell
you what's missing.

Logging:
Look at your syslog file for nccm entries. Depending upon
the verbosity level set in the config file you may not see
much if at all anything.
By default the production level of the script logs WARNING
and above which results in syslog silence until something
bad happens.
To increase logging verbosity change this line in the
nccm.yml config file to debug:
`nccm_config_loglevel: debug`
Also - more debugging calls exist but are commented out in
the code due to too much logging. Enable them as required.


Hacking nccm
------------

Take something good and make it better!
The code is heavily commented, with the hope that it will
make life easier for modders and forkers.

The config file is simple yaml. If you already have a
collection of logins elsewhere in an accessible format -
writing a script to convert and append fields to nccm.yml
is easy.


Misc
----

This program aims to do one thing well - lets you make SSH
connections from an ncurses based manager with minimum
distraction. Feature requests that keep nccm on focus will
be considered.

'''

# Standard library imports:
import collections
import curses
import itertools
import logging
import logging.handlers
import operator
import os.path
import pathlib
import pydoc
import shlex
import string
import subprocess
import sys

# Pay attention to these imports:
import yaml         # Requires: 'pip3 install --user PyYAML'


# This block handles logging to syslog:
LogWrite = logging.getLogger('MyLogger')
LogWrite.setLevel(logging.WARNING)
    # ^ Set this to logging.DEBUG or logging.WARNING for your INITIAL desired log level.
    #   Config file log level takes over from when it is loaded, this value controls
    #   logging verbosity until then.
LogWrite.propagate = False
    # ^ Prevents duplicate logging by ancestor loggers (if any)
LogHandler = logging.handlers.SysLogHandler(address = '/dev/log')
LogWrite.addHandler(LogHandler)
LogWriteFormatter = logging.Formatter('{}: %(message)s'.format('nccm'))
    # ^ Appends 'nccm' to log lines for easy identification
LogHandler.setFormatter(LogWriteFormatter)


# Setup the supported directories/pathnames for the connections file.
# If you want to store nccm.yml in a directory that's not already supported
# or change the filename, do it here:
ConfigFile = 'nccm.yml'
ConfigFilePath = []
ConfigFilePath.append(str(pathlib.Path.home()) + '/.config/nccm/' + ConfigFile)
ConfigFilePath.append(str(pathlib.Path.home()) + '/.' + ConfigFile)
ConfigFilePath.append(str(pathlib.Path.home()) + '/' + ConfigFile)
ConfigFilePath.append('/etc/' + ConfigFile)

ScreenHeight = ScreenWidth = 0      # The terminal window dimensions
DisplayObjects = []     # A list of window objects that display info on the screen (no user input)
TextboxObjects = []     # A list of editable textbox windows (user input)

HelpMenuItems = collections.OrderedDict((
    ( 'Arrows', 'Scroll' ),
    ( 'Enter', 'Select' ),
    ( 'ctrl-h', 'Help' ),
    ( 'ctrl-q', 'Quit' ),
))


class HelpTextDisplay:
    ''' This manages window objects for help lines '''

    def __init__(self, LinesCount=None, ColsCount=None,
        BeginY=None, BeginX=None):
        self.Window = curses.newwin(LinesCount, ColsCount, BeginY, BeginX)

        for Looper in HelpMenuItems:
            self.Window.addstr('  '+Looper, curses.color_pair(1))
            self.Window.addstr('-'+HelpMenuItems[Looper], curses.color_pair(2))

    def Display(self):
        self.Window.noutrefresh()


class BasicTextDisplay:
    ''' This manages window objects to display simple text '''

    def __init__(self, LinesCount=None, ColsCount=None,
        BeginY=None, BeginX=None, Text='', ColorPair=0):
        self.Window = curses.newwin(LinesCount, ColsCount, BeginY, BeginX)
        self.Window.addstr(Text, curses.color_pair(ColorPair))

    def Display(self):
        self.Window.noutrefresh()


class Connections:
    ''' This handles the connections list.

        TextFilters are the objects that hold user input (the textboxes) so that we can
            later filter the display with text from them (Display method).
        '''

    def __init__(self, LinesCount=None, ColsCount=None, BeginY=None,
        BeginX=None, ColorPair=0, TextFilters=None, stdscr=None):

        # Window parameters:
        self.stdscr = stdscr
        self.ColorPair = ColorPair
        self.TextFilters = TextFilters
        self.MaxTextLines = LinesCount-1
        self.MaxTextWidth = ColsCount-2

        # Storage components:
        self.LoadedServersDict = {}
            # ^ The yaml connections file loaded into a dict. Apart from conversion to
            #   internal formats, this dict won't be used again.
        self.FullServersList = []
            # ^ Full list as imported from the loaded object
            #   This is the source list that we reuse during the program.
            #   It is also sorted in place if the user chooses sorting by column.
        self.MaxLenCounter = 0      # Length of the longest serial number field
        self.MaxLenFriendly = 0     # Length of the longest friendly name
        self.MaxLenCommand = 0      # Length of the longest connection string command (root@server)
        self.MaxLenComment = 0      # Length of the longest comment column

        self.SortOrder = True       # Column sort order (flips between True/False)
        self.YOffset = 0            # Y offset for scrolling vertically
        self.XOffset = 0            # X offset for scrolling horizontally
        self.MaxLineLength = 0      # Result of formatting the text to fit the max column length
        self.MarkerLine = 0         # Highlighted line for connection selection
        self.SelectedEntry = None   # The connection number matching MarkerLine
        self.SelectedEntryVal = None    # Connection number value of the highlighted line
        self.DisplayResultsCount = 0    # Number of displayed results after filtering

        self.Window = curses.newwin(LinesCount, ColsCount, BeginY, BeginX)


    def Load(self):
        ''' Loads the connections file '''

        for FileLooper in ConfigFilePath:
            if os.path.exists(FileLooper):
                break
        LogWrite.debug('Found config file: FileLooper = {}'.format(FileLooper))

        with open (FileLooper, 'r') as ConfigFileToRead:
            self.LoadedServersDict = yaml.safe_load(ConfigFileToRead)    # yaml.load is not safe

        # This code is needed because FriendlyName connections without any
        # config items have a value of None. I need to replace it with {} for
        # the dict lookups to work later on:
        for Looper in self.LoadedServersDict:
            if self.LoadedServersDict[Looper] == None:
                self.LoadedServersDict[Looper] = {}
        LogWrite.debug('self.LoadedServersDict = {}'.format(self.LoadedServersDict))

        # Extract config items first to prevent them from being read as conns:
        self.ControlMode = self.LoadedServersDict.pop('nccm_config_controlmode', 'std').lower()
            # ^ Controls how arrow keys move the display & the marker. Options are std, focus
        LogWrite.debug('Loaded config self.ControlMode = {}'.format(self.ControlMode))

        LogWrite.setLevel(getattr(logging, self.LoadedServersDict.pop
            ('nccm_config_loglevel', 'WARNING').upper()))
        LogWrite.debug('Log level now = {}'.format(LogWrite.getEffectiveLevel()))
            # ^ Values documented here: https://docs.python.org/3/library/logging.html#levels

        # Populate the FullServersList (list of config items as lists, even unconfigured items):
        try:
            for Counter, Item in enumerate(sorted(self.LoadedServersDict.keys(), key=str.lower)):
                #LogWrite.debug('Processing Item = {} , Counter = {}'.format(Item, Counter))

                # The following supports extracting UserName & Address from FriendlyName
                # if UserName & Address are not supplied:
                UserName = self.LoadedServersDict[Item].get('user', False)
                if not UserName:
                    UserName = self.LoadedServersDict[Item].get('user', Item.split(sep='@')[0])

                Address = self.LoadedServersDict[Item].get('address', False)
                if not Address:
                    Address = self.LoadedServersDict[Item].get('address', Item.split(sep='@')[1])
                
                Pem = self.LoadedServersDict[Item].get('pem', '')

                Comment = self.LoadedServersDict[Item].get('comment', '')
                    # ^ .get because item my be empty

                #LogWrite.debug('Counter = {} , Item = {} , UserName = {}'
                #    'Address = {} , Comment = {}'
                #        .format(Counter, Item, UserName, Address, Comment))
                self.FullServersList.append([
                    Counter, Item, '{}@{} -i {}'.format(UserName, Address, Pem), Comment])
            # ^ Now we have a list of lists:
            #  [[Serial # , FriendlyName , ConnString , Comment] , [...]]
            #LogWrite.debug('self.FullServersList = {}'.format(self.FullServersList))

        except Exception as Exc:
            LogWrite.warning('Error loading connection. Counter = {} , Item = {}'
                .format(Counter, Item))
            raise Exc

        # Calculate the max length of each column:
        for Counter, Looper in enumerate([
            'MaxLenCounter', 'MaxLenFriendly', 'MaxLenCommand', 'MaxLenComment']):
            setattr(self, Looper, max(len(str(i[Counter])) for i in self.FullServersList))


    def Sort(self, Column):
        ''' Sorts the internal-use FullServersList list per the requested column

            Example line / Column numbers:
                12  My server   root@1.2.3.4    This is a description
                0   1           2    3          4

            Columns:
                0   List serial #       (12)
                1   Friendly name       (My server)
                2   User name           (root)
                3   Server address      (1.2.3.4)
                4   Description         (This is a description)
        '''

        LogWrite.debug('Sort by Column = {}'.format(Column))

        if Column in [ 0, 1, 2 ]:
            self.FullServersList.sort(key=operator.itemgetter(Column), reverse=self.SortOrder)

        if Column == 3:
            #def ReturnAddress(var):    # Alternate sorting code
            #    return var[2].split(sep='@')[1]

            self.FullServersList.sort(key=lambda x: x[2].split(sep='@')[1], reverse=self.SortOrder)
                # ^ Sort by the address bit ignoring the user name bit

            #self.FullServersList.sort(key=ReturnAddress, reverse=self.SortOrder)
                # ^ If the lambda confuses you, uncomment this version instead + def from above
                #   Does exactly the same thing.

        if Column == 4:
            self.FullServersList.sort(key=operator.itemgetter(3), reverse=self.SortOrder)
                # ^ Column == 4 becomes sort by list item 3 because list item 3
                #   is treated as Columns 2 and 3:
                #       2 for the entire user@address
                #       3 for the address bit

        self.SortOrder = not(self.SortOrder)
            # ^ Reverse True to False, False to True so that next time this function
            #   is called the sort will be reversed.


    def Save(self):
        ''' Saves the connections file '''
        # Nothing here. Might add save feature if I allow user to add connection details


    def GetConnect(self, Counter):
        ''' Get link to connet to '''

        Counter = int(Counter)
        SshCommand = 'ssh ' + [ i[2] for i in self.FullServersList if i[0] == Counter ][0]
        LogWrite.debug('Counter (line #) = {} , SshCommand = {}'.format(Counter, SshCommand))
        return SshCommand


    def Display(self):

        # Check if the window was resized since it was started:
        NewScreenHeight, NewScreenWidth = self.stdscr.getmaxyx()
        LogWrite.debug('NewScreenHeight = {} , NewScreenWidth = {} '
            .format(NewScreenHeight, NewScreenWidth))

        if NewScreenHeight != ScreenHeight or NewScreenWidth != ScreenWidth:
            RestoreTerminal(self.stdscr)
            print('\n\nnccm: Resizing the window during menu display is not permitted.\n'
                'You may resize the window during or after connection initiation.')
            sys.exit(1)

        FilterTextList = set()          # Unique text strings for filtering
        self.ResultsList = []           # Result of the filtering

        self.Window.erase()

        # Merge the users text input into a set whose uniqueness improves search performance:
        for Looper in self.TextFilters:
            FilterTextList.update(set(Looper.Text.split(' ')))

        # Populate self.ResultsList with all line that match the above filter:
        for Counter, LineLooper in enumerate(self.FullServersList):
            Line = ('{:<{CounterWidth}}    {:<{ItemWidth}}    '
                '{:<{CommandWidth}}    {:<{CommentWidth}}'
                 .format(
                    LineLooper[0],
                    LineLooper[1],
                    LineLooper[2],
                    LineLooper[3],
                    CounterWidth = self.MaxLenCounter,
                    ItemWidth = self.MaxLenFriendly,
                    CommandWidth = self.MaxLenCommand,
                    CommentWidth = self.MaxLenComment))

            if len(Line) > self.MaxLineLength:
                self.MaxLineLength = len(Line)

            if sorted(FilterTextList) == sorted(x for x in FilterTextList if x in Line):
                self.ResultsList.append(Line)

        self.ResultsList = [x.ljust(self.MaxLineLength, ' ') for x in self.ResultsList]
        self.DisplayResultsCount = 0

        if self.MarkerLine > (len(self.ResultsList)-1):
            self.MarkerLine = (len(self.ResultsList)-1)
        if self.MarkerLine < 0:
            self.MarkerLine = 0
        self.SelectedEntry = None

        for LineNumber, Looper in enumerate(
            self.ResultsList[self.YOffset:(self.YOffset+self.MaxTextLines)]):
            self.DisplayResultsCount += 1   # Number of lines displayed
            PaddedString = Looper[self.XOffset:(self.XOffset+self.MaxTextWidth)]

            if LineNumber == self.MarkerLine:
                self.Window.addstr(PaddedString, curses.color_pair(4))
                self.SelectedEntry = Looper
                self.SelectedEntryVal = int(self.SelectedEntry.lstrip().split()[0])
            else:
                self.Window.addstr(PaddedString)

            self.Window.addstr('\n')

        self.Window.noutrefresh()


class TextBox:
    ''' This manages objects that handle text input '''

    def __init__(self, LinesCount=None, ColsCount=None,
        BeginY=None, BeginX=None, ColorPair=0):

        self.Text = ''  # This is the text that the user enters
        self.MaxText = ColsCount-1
        self.Window = curses.newwin(LinesCount, ColsCount, BeginY, BeginX)
        self.Window.keypad(True)
            # ^ Get special keys support for this window.
            #   Calling 'stdscr.keypad(True)' is different and doesn't reflect in windows -
            #   it must be called separately.
            #   Very important - otherwise stuff like getch return stuff like arrow keys
            #   in multiple bytes (one per call) and it's screwed up.
        self.Window.bkgd(' ', curses.color_pair(ColorPair))


    def Display(self):
        self.Window.noutrefresh()


    def ZeroCursor(self):
        ''' Position the cursor at 0, 0 in this window.
            Call with:
                ConnBox.ZeroCursor()
        '''

        self.Window.move(0, 0)      # Position cursor at 0, 0


    def ActivateWindow(self):
        ''' Brings this window to the front.
            Call with:
                ConnBox.ActivateWindow()
        '''

        self.Window.noutrefresh()
        curses.doupdate()


    def ReadKey(self):
        UserKey = self.Window.getch()    # Read a key and return a code
        return UserKey


    def ProcessKey(self, Key):

        if Key == curses.KEY_BACKSPACE or Key == 263:   # Backspace key
            if len(self.Text) > 0:
                self.Text = self.Text[:-1]

        elif len(self.Text) < self.MaxText:
            self.Text += chr(Key).lower()
                # ^ Force to lower and search is case insensitive

        self.Window.clear()
        self.Window.addstr(0, 0, self.Text)


def RestoreTerminal(stdscr):
    ''' Restore the terminal to a sane status '''

    curses.curs_set(1)          # Restore blinking cursor
    curses.echo()               # Restore terminal echo
    stdscr.keypad(False)        # Return special keys to normal
    curses.noraw()              # Return raw mode to normal
    curses.endwin()             # End curses session


def UpdateDisplay():
    ''' The window objects were added to DisplayObjects list, so here we need to use the
        Display method of those objects. '''

    global DisplayObjects

    for Looper in DisplayObjects:
        Looper.Display()
    curses.doupdate()   # Speed up display and avoid flickering by using 'window.noutrefresh'


def SetupCurses(stdscr):
    ''' Put all pre-run tests here. Any failure will exit the program. '''


    global ScreenHeight, ScreenWidth

    curses.curs_set(1)          # Enable the blinking cursor
    curses.noecho()             # Disable echo to the terminal
    stdscr.keypad(True)
        # ^ Get special keys support in stdscr. Per window setting also required
    curses.raw()                # Disable control codes

    curses.init_pair(1, curses.COLOR_YELLOW, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_CYAN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_BLUE)
    curses.init_pair(4, curses.COLOR_WHITE, curses.COLOR_RED)

    if not curses.has_colors(): # Color not supported
        RestoreTerminal(stdscr)
        print('nccm: This program requires color support')
        return False

    ScreenHeight, ScreenWidth = stdscr.getmaxyx()
    LogWrite.debug('ScreenHeight = {} , ScreenWidth = {}'.format(ScreenHeight, ScreenWidth))

    if ScreenWidth < 60 or ScreenHeight < 15:
        RestoreTerminal(stdscr)
        print('nccm: Window must be at least 60x15')
        return False


def SetupWindows(stdscr):
    ''' Create the various windows '''

    global ScreenHeight, ScreenWidth
    global DisplayObjects
    global TextboxObjects

    # Help text display window:
    HelpBox = HelpTextDisplay(LinesCount=1, ColsCount=ScreenWidth,
        BeginY=ScreenHeight-1, BeginX=0)
    DisplayObjects.append(HelpBox)      # Add this window to the displayable windows

    # Connection text display window:
    ConnText = BasicTextDisplay(LinesCount=1, ColsCount=10,
        BeginY=ScreenHeight-3, BeginX=2, Text='Conn #', ColorPair=1)
    DisplayObjects.append(ConnText)

    # Connection text input window:
    ConnBox = TextBox(LinesCount=1, ColsCount=8,
        BeginY=ScreenHeight-3, BeginX=10, ColorPair=3)
    DisplayObjects.append(ConnBox)      # Add this window to the displayable windows
    TextboxObjects.append(ConnBox)      # Add this window to the windows that store user input
                                        # ^ We do this because later we filter the ConnectionsList
                                        #   display output based upon the text here.

    # Filter text display window:
    FilterText = BasicTextDisplay(LinesCount=1, ColsCount=10,
        BeginY=ScreenHeight-3, BeginX=20, Text='Filter:', ColorPair=1)
    DisplayObjects.append(FilterText)

    # Filter text input window:
    FilterBox = TextBox(LinesCount=1, ColsCount=ScreenWidth-31,
        BeginY=ScreenHeight-3, BeginX=29, ColorPair=3)
    DisplayObjects.append(FilterBox)
    TextboxObjects.append(FilterBox)

    # Connections list text display window:
    ConnectionsList = Connections(LinesCount=ScreenHeight-3,
        ColsCount=ScreenWidth, BeginY=0, BeginX=0, ColorPair=0,
        TextFilters=[FilterBox, ConnBox] , stdscr=stdscr)
    ConnectionsList.Load()
        # ^ Load the connections list config file into this object (normal operation)
    DisplayObjects.append(ConnectionsList)

    CyclicTextboxObjects = itertools.cycle(TextboxObjects)
        # ^ Call this after adding all the textbox windows
        #   We will use it as a cyclic list iterator so that every press of TAB
        #   will give us the next textbox object in the list.

    return ConnectionsList, ConnBox, FilterBox, CyclicTextboxObjects


def MainCursesFunction(stdscr):

    ConnectString = False

    if SetupCurses(stdscr) == False:       # Something failed in setup or tests
        return

    ConnectionsList, ConnBox, FilterBox, CyclicTextboxObjects = SetupWindows(stdscr)
    UpdateDisplay()
    ActiveWindow = FilterBox    # The first window to read user input from
    FilterBox.ZeroCursor()
        # ^ We have no input text so activate ConnBox window and zero the cursor.
        #   Failure to do this will position the cursor at the last window drawn.

    # This block loops in the CyclicTextboxObjects until it's positioned at ActiveWindow.
    # We need this because the initial starting point may not be correct and the first
    # time we press TAB may do nothing:
    for Looper in CyclicTextboxObjects:
        if Looper == ActiveWindow:
            break

    while True:
        UserKey = ActiveWindow.ReadKey()
        LogWrite.debug('Keyboard entry UserKey = {}'.format(UserKey))

# This block is not required any more since I handle it better in Connections.Display() method:
#        if UserKey == -1:       # Happens when window is resized
#            # ^ If I don't capture this, window resize causes a curses exception
#            LogWrite.debug('Detected window resize')
#            pass

        if UserKey == 9:    # Tab key (move between text boxes)
            ActiveWindow = next(CyclicTextboxObjects)
                # ^ See the 'for Looper in CyclicTextboxObjects:' comment above
            ActiveWindow.ActivateWindow()
                # ^ Get the next item in the iterable and run it's ActivateWindow method.
                #   This is effectively the next textbox window object

        # Handle text entry in FilterBox:
        elif ( (chr(UserKey) in string.digits
            or chr(UserKey) in string.ascii_letters
            or chr(UserKey) in string.punctuation
            or UserKey == 32        # Space
            or UserKey == curses.KEY_BACKSPACE
            or UserKey == 263)      # Backspace key
            and ActiveWindow == FilterBox ):
            # ^ Filterbox accepts any printable character or backspace
            #   Using string.punctuation crashes on ctrl-j input so I explictly
            #   identify the characters accepted.
                ConnectionsList.YOffset = 0
                ConnectionsList.XOffset = 0
                    # ^ Keypress received so reset the display to the beginning of the list
                ActiveWindow.ProcessKey(UserKey)

        # Handle text entry in ConnBox:
        elif ( (chr(UserKey) in string.digits
            or UserKey == curses.KEY_BACKSPACE
            or UserKey == 263)              # Backspace key
            and ActiveWindow == ConnBox ):
            # ^ Filterbox accepts any digit or backspace
                ActiveWindow.ProcessKey(UserKey)

        elif ( UserKey == 33                # ! key (sort by column #1)
            and ActiveWindow == ConnBox ):
                ConnectionsList.Sort(0)

        elif ( UserKey == 64                # @ key (sort by column #2)
            and ActiveWindow == ConnBox ):
                ConnectionsList.Sort(1)

        elif ( UserKey == 35                # # key (sort by column #3)
            and ActiveWindow == ConnBox ):
                ConnectionsList.Sort(2)

        elif ( UserKey == 36                # $ key (sort by column #4)
            and ActiveWindow == ConnBox ):
                ConnectionsList.Sort(3)

        elif ( UserKey == 37                # $ key (sort by column #5)
            and ActiveWindow == ConnBox ):
                ConnectionsList.Sort(4)

        elif UserKey == 337:                # Shift up arrow
            if ConnectionsList.ControlMode == 'focus':
                if ConnectionsList.MarkerLine > 0:
                    ConnectionsList.MarkerLine -= 1

        elif UserKey == 336:                # Shift down arrow
            if ConnectionsList.ControlMode == 'focus':
                if ConnectionsList.MarkerLine < (ConnectionsList.DisplayResultsCount-1):
                    ConnectionsList.MarkerLine += 1

        elif UserKey == 393:                # Shift left arrow
            if ConnectionsList.ControlMode == 'focus':
                ConnectionsList.MarkerLine = 0

        elif UserKey == 402:                # Shift right arrow
            if ConnectionsList.ControlMode == 'focus':
                ConnectionsList.MarkerLine = (ConnectionsList.DisplayResultsCount-1)

        elif UserKey == curses.KEY_UP:      # Up arrow
            if ConnectionsList.ControlMode == 'focus':
                if ConnectionsList.YOffset > 0:
                    ConnectionsList.YOffset -= 1
            elif ConnectionsList.ControlMode == 'std':
                if ConnectionsList.MarkerLine > 0:
                    ConnectionsList.MarkerLine -= 1
                elif len(ConnectionsList.ResultsList) - ConnectionsList.YOffset > 0:
                    if ConnectionsList.YOffset >1:
                        ConnectionsList.YOffset -= 1
                    else:
                        ConnectionsList.YOffset = 0

        elif UserKey == curses.KEY_DOWN:    # Down arrow
            if ConnectionsList.ControlMode == 'focus':
                if len(ConnectionsList.ResultsList) - ConnectionsList.YOffset > ConnectionsList.MaxTextLines:
                    ConnectionsList.YOffset += 1
            elif ConnectionsList.ControlMode == 'std':
                if ConnectionsList.MarkerLine < (ConnectionsList.DisplayResultsCount-1):
                    ConnectionsList.MarkerLine += 1
                elif len(ConnectionsList.ResultsList) - ConnectionsList.YOffset > ConnectionsList.MaxTextLines:
                    ConnectionsList.YOffset += 1

        elif UserKey == curses.KEY_HOME:    # Home key
            if ConnectionsList.ControlMode == 'focus':
                ConnectionsList.YOffset = 0
            elif ConnectionsList.ControlMode == 'std':
                ConnectionsList.YOffset = 0
                ConnectionsList.MarkerLine = 0

        elif UserKey == curses.KEY_END:     # End key
            if ConnectionsList.ControlMode == 'focus':
                if len(ConnectionsList.ResultsList) > ConnectionsList.MaxTextLines:
                    ConnectionsList.YOffset = len(ConnectionsList.ResultsList) - ConnectionsList.MaxTextLines
            elif ConnectionsList.ControlMode == 'std':
                if len(ConnectionsList.ResultsList) > ConnectionsList.MaxTextLines:
                    ConnectionsList.YOffset = len(ConnectionsList.ResultsList) - ConnectionsList.MaxTextLines
                ConnectionsList.MarkerLine = (ConnectionsList.DisplayResultsCount-1)

        elif UserKey == curses.KEY_PPAGE:   # PageUp key
            ConnectionsList.YOffset -= ConnectionsList.MaxTextLines
            if ConnectionsList.YOffset < 0:
                ConnectionsList.YOffset = 0

        elif UserKey == curses.KEY_NPAGE:   # PageDown key
            ConnectionsList.YOffset += ConnectionsList.MaxTextLines
            if ConnectionsList.YOffset > (len(ConnectionsList.ResultsList)-ConnectionsList.MaxTextLines):
                ConnectionsList.YOffset = len(ConnectionsList.ResultsList) - ConnectionsList.MaxTextLines

        elif UserKey == curses.KEY_LEFT:    # Left arrow (scroll left)
            ConnectionsList.XOffset -= (ConnectionsList.MaxTextWidth //3)
            if ConnectionsList.XOffset < 0:
                ConnectionsList.XOffset = 0

        elif UserKey == curses.KEY_RIGHT:   # Right arrow (scroll right)
            ConnectionsList.XOffset += (ConnectionsList.MaxTextWidth //3)
            if ConnectionsList.XOffset > (ConnectionsList.MaxLineLength - ConnectionsList.MaxTextWidth):
                ConnectionsList.XOffset = (ConnectionsList.MaxLineLength - ConnectionsList.MaxTextWidth)

        elif UserKey == 265:                # F1 key (sort by column #1)
            ConnectionsList.Sort(0)

        elif UserKey == 266:                # F2 key (sort by column #2)
            ConnectionsList.Sort(1)

        elif UserKey == 267:                # F3 key (sort by column #3)
            ConnectionsList.Sort(2)

        elif UserKey == 268:                # F4 key (sort by column #4)
            ConnectionsList.Sort(3)

        elif UserKey == 269:                # F4 key (sort by column #5)
            ConnectionsList.Sort(4)

        elif ((UserKey == curses.KEY_ENTER or UserKey in [10, 13])  # Enter key
            and ActiveWindow == ConnBox
            and ConnBox.Text):
                if (int(ConnBox.Text) >= 0
                    and int(ConnBox.Text) <= (len(ConnectionsList.FullServersList) -1)):
                        ConnectString = ConnectionsList.GetConnect(ConnBox.Text)
                        break

        elif ((UserKey == curses.KEY_ENTER or UserKey in [10, 13])
            and ConnectionsList.SelectedEntry):  # Enter key
                ConnectString = ConnectionsList.GetConnect(ConnectionsList.SelectedEntryVal)
                break

        elif UserKey == 8:      # Ctrl-h key (help)
            curses.endwin()     # De-initialize and return terminal to normal status
            pydoc.pipepager(__doc__, cmd='less -i --dumb --no-init')
                # ^ Print the text in through the less pager
                #   so we can get paging, search, etc

        elif UserKey == 11:     # Ctrl-k key (toggle cursor mode)
            if ConnectionsList.ControlMode == 'std':
                ConnectionsList.ControlMode = 'focus'
            else:
                ConnectionsList.ControlMode = 'std'

        elif UserKey == 17 or UserKey == 3:     # ctrl-q / ctrl-c (quit)
            break

        UpdateDisplay()
        ActiveWindow.ActivateWindow()

    RestoreTerminal(stdscr)
    return ConnectString


def main(*args):
    ConnectString = curses.wrapper(MainCursesFunction)

    if ConnectString:
        print('nccm: About to ssh to: {} ...'.format(ConnectString))
        ExtCommand = shlex.split(ConnectString)    # Split the command line into arguments
        subprocess.run(ExtCommand)              # Connect to the ssh server
        print('nccm: Completed ssh to: {} ...'.format(ConnectString))


if __name__ == '__main__':
        main()

